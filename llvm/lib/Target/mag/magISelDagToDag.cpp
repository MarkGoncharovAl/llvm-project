#include "MCTargetDesc/magMCTargetDesc.h"
#include "mag.h"
#include "magTargetMachine.h"
#include "llvm/CodeGen/MachineFrameInfo.h"
#include "llvm/CodeGen/MachineFunction.h"
#include "llvm/CodeGen/MachineInstrBuilder.h"
#include "llvm/CodeGen/MachineRegisterInfo.h"
#include "llvm/CodeGen/SelectionDAG.h"
#include "llvm/CodeGen/SelectionDAGISel.h"
#include "llvm/CodeGen/TargetLowering.h"
#include "llvm/IR/CallingConv.h"
#include "llvm/IR/Constants.h"
#include "llvm/IR/DerivedTypes.h"
#include "llvm/IR/Function.h"
#include "llvm/IR/Intrinsics.h"
#include "llvm/IR/LLVMContext.h"
#include "llvm/Support/Compiler.h"
#include "llvm/Support/Debug.h"
#include "llvm/Support/ErrorHandling.h"
#include "llvm/Support/raw_ostream.h"

using namespace llvm;

#define DEBUG_TYPE "mag-isel"

namespace {

class magDAGToDAGISel : public SelectionDAGISel {
  const magSubtarget *Subtarget = nullptr;

public:
  magDAGToDAGISel(magTargetMachine &TM, CodeGenOpt::Level OptLevel)
      : SelectionDAGISel(TM, OptLevel) {}

  bool runOnMachineFunction(MachineFunction &MF) override {
    Subtarget = &MF.getSubtarget<magSubtarget>();
    return SelectionDAGISel::runOnMachineFunction(MF);
  }

  bool SelectAddrFI(SDValue Addr, SDValue &Base);
  bool SelectBaseAddr(SDValue Addr, SDValue &Base);

  void Select(SDNode *N) override;

  StringRef getPassName() const override {
    return "mag DAG->DAG Pattern Instruction Selection";
  }

// Include the pieces autogenerated from the target description.
#include "magGenDAGISel.inc"
};

} // end anonymous namespace

/// This pass converts a legalized DAG into a mag-specific DAG, ready for
/// instruction scheduling.
FunctionPass *llvm::createmagISelDag(magTargetMachine &TM,
                                      CodeGenOpt::Level OptLevel) {
  return new magDAGToDAGISel(TM, OptLevel);
}

bool magDAGToDAGISel::SelectAddrFI(SDValue Addr, SDValue &Base) {
  if (auto *FIN = dyn_cast<FrameIndexSDNode>(Addr)) {
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
    return true;
  }
  return false;
}

bool magDAGToDAGISel::SelectBaseAddr(SDValue Addr, SDValue &Base) {
  if (auto *FIN = dyn_cast<FrameIndexSDNode>(Addr))
    Base = CurDAG->getTargetFrameIndex(FIN->getIndex(), MVT::i32);
  else
    Base = Addr;
  return true;
}

void magDAGToDAGISel::Select(SDNode *Node) {
  if (Node->isMachineOpcode()) {
    LLVM_DEBUG(dbgs() << "== "; Node->dump(CurDAG); dbgs() << "\n");
    Node->setNodeId(-1);
    return;
  }
  unsigned Opcode = Node->getOpcode();
  SDLoc DL(Node);
  MVT VT = Node->getSimpleValueType(0);

  switch (Opcode) {
  case ISD::FrameIndex: {
    SDValue Imm = CurDAG->getTargetConstant(0, DL, MVT::i32);
    int FI = cast<FrameIndexSDNode>(Node)->getIndex();
    SDValue TFI = CurDAG->getTargetFrameIndex(FI, VT);
    ReplaceNode(Node, CurDAG->getMachineNode(mag::ADDI, DL, VT, TFI, Imm));
    return;
  }
  }
  SelectCode(Node);
}
